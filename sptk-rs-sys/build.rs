use std::path::PathBuf;

fn main() {
    let sptk_dir:    &str = "SPTK";
    let sptk_src:    &str = &format!("{}/{}", sptk_dir, "src");
    let third_party_src: &str = &format!("{}/{}", sptk_dir, "third_party");
    let sptk_header: &str = &format!("{}/{}", sptk_dir, "include");

    // Build file names list dynamically
    let file_names = vec![
        format!("{}/GETOPT/ya_getopt.cc", third_party_src),
        
        format!("{}/REAPER/core/file_resource.cc", third_party_src),
        format!("{}/REAPER/core/float_matrix.cc", third_party_src),
        format!("{}/REAPER/core/track.cc", third_party_src),
        format!("{}/REAPER/epoch_tracker/epoch_tracker.cc", third_party_src),
        format!("{}/REAPER/epoch_tracker/fd_filter.cc", third_party_src),
        format!("{}/REAPER/epoch_tracker/fft_reaper.cc", third_party_src),
        format!("{}/REAPER/epoch_tracker/lpc_analyzer.cc", third_party_src),
        format!("{}/REAPER/wave/codec_riff.cc", third_party_src),
        format!("{}/REAPER/wave/wave.cc", third_party_src),
        format!("{}/REAPER/wave/wave_io.cc", third_party_src),
        
        format!("{}/SWIPE/swipe.cc", third_party_src),
        format!("{}/SWIPE/vector.cc", third_party_src),

        format!("{}/Snack/jkGetF0.cc", third_party_src),
        format!("{}/Snack/sigproc.cc", third_party_src),

        format!("{}/WORLD/aperiodicity.cc", third_party_src),
        format!("{}/WORLD/cheaptrick.cc", third_party_src),
        format!("{}/WORLD/common.cc", third_party_src),
        format!("{}/WORLD/d4c.cc", third_party_src),
        format!("{}/WORLD/dio.cc", third_party_src),
        format!("{}/WORLD/fft_world.cc", third_party_src),
        format!("{}/WORLD/harvest.cc", third_party_src),
        format!("{}/WORLD/matlabfunctions.cc", third_party_src),
        format!("{}/WORLD/stonemask.cc", third_party_src),
        format!("{}/WORLD/synthesis.cc", third_party_src),

        format!("{}/main/acorr.cc", sptk_src),
        format!("{}/main/acr2csm.cc", sptk_src),
        format!("{}/main/aeq.cc", sptk_src),
        format!("{}/main/alaw.cc", sptk_src),
        format!("{}/main/amgcep.cc", sptk_src),
        format!("{}/main/ap.cc", sptk_src),
        format!("{}/main/average.cc", sptk_src),
        format!("{}/main/b2mc.cc", sptk_src),
        format!("{}/main/bcp.cc", sptk_src),
        format!("{}/main/bcut.cc", sptk_src),
        format!("{}/main/c2acr.cc", sptk_src),
        format!("{}/main/c2mpir.cc", sptk_src),
        format!("{}/main/c2ndps.cc", sptk_src),
        format!("{}/main/cdist.cc", sptk_src),
        format!("{}/main/clip.cc", sptk_src),
        format!("{}/main/csm2acr.cc", sptk_src),
        format!("{}/main/dct.cc", sptk_src),
        format!("{}/main/decimate.cc", sptk_src),
        format!("{}/main/delay.cc", sptk_src),
        format!("{}/main/delta.cc", sptk_src),
        format!("{}/main/dequantize.cc", sptk_src),
        format!("{}/main/df2.cc", sptk_src),
        format!("{}/main/dfs.cc", sptk_src),
        format!("{}/main/dmp.cc", sptk_src),
        format!("{}/main/drc.cc", sptk_src),
        format!("{}/main/dtw.cc", sptk_src),
        format!("{}/main/dtw_merge.cc", sptk_src),
        format!("{}/main/entropy.cc", sptk_src),
        format!("{}/main/excite.cc", sptk_src),
        format!("{}/main/extract.cc", sptk_src),
        format!("{}/main/fbank.cc", sptk_src),
        format!("{}/main/fd.cc", sptk_src),
        format!("{}/main/fft.cc", sptk_src),
        format!("{}/main/fft2.cc", sptk_src),
        format!("{}/main/fftcep.cc", sptk_src),
        format!("{}/main/fftr.cc", sptk_src),
        format!("{}/main/fftr2.cc", sptk_src),
        format!("{}/main/frame.cc", sptk_src),
        format!("{}/main/freqt.cc", sptk_src),
        format!("{}/main/gmm.cc", sptk_src),
        format!("{}/main/gmmp.cc", sptk_src),
        format!("{}/main/gnorm.cc", sptk_src),
        format!("{}/main/grpdelay.cc", sptk_src),
        format!("{}/main/histogram.cc", sptk_src),
        format!("{}/main/huffman.cc", sptk_src),
        format!("{}/main/huffman_decode.cc", sptk_src),
        format!("{}/main/huffman_encode.cc", sptk_src),
        format!("{}/main/ialaw.cc", sptk_src),
        format!("{}/main/idct.cc", sptk_src),
        format!("{}/main/ifft.cc", sptk_src),
        format!("{}/main/ifft2.cc", sptk_src),
        format!("{}/main/ignorm.cc", sptk_src),
        format!("{}/main/iltcdf.cc", sptk_src),
        format!("{}/main/imglsadf.cc", sptk_src),
        format!("{}/main/impulse.cc", sptk_src),
        format!("{}/main/imsvq.cc", sptk_src),
        format!("{}/main/interpolate.cc", sptk_src),
        format!("{}/main/ipnorm.cc", sptk_src),
        format!("{}/main/ipqmf.cc", sptk_src),
        format!("{}/main/iulaw.cc", sptk_src),
        format!("{}/main/lar2par.cc", sptk_src),
        format!("{}/main/lbg.cc", sptk_src),
        format!("{}/main/levdur.cc", sptk_src),
        format!("{}/main/linear_intpl.cc", sptk_src),
        format!("{}/main/lpc.cc", sptk_src),
        format!("{}/main/lpc2c.cc", sptk_src),
        format!("{}/main/lpc2lsp.cc", sptk_src),
        format!("{}/main/lpc2par.cc", sptk_src),
        format!("{}/main/lpccheck.cc", sptk_src),
        format!("{}/main/lsp2lpc.cc", sptk_src),
        format!("{}/main/lspcheck.cc", sptk_src),
        format!("{}/main/lspdf.cc", sptk_src),
        format!("{}/main/ltcdf.cc", sptk_src),
        format!("{}/main/magic_intpl.cc", sptk_src),
        format!("{}/main/mc2b.cc", sptk_src),
        format!("{}/main/mcpf.cc", sptk_src),
        format!("{}/main/medfilt.cc", sptk_src),
        format!("{}/main/median.cc", sptk_src),
        format!("{}/main/merge.cc", sptk_src),
        format!("{}/main/mfcc.cc", sptk_src),
        format!("{}/main/mgc2mgc.cc", sptk_src),
        format!("{}/main/mgc2sp.cc", sptk_src),
        format!("{}/main/mgcep.cc", sptk_src),
        format!("{}/main/mglsadf.cc", sptk_src),
        format!("{}/main/mglsp2sp.cc", sptk_src),
        format!("{}/main/minmax.cc", sptk_src),
        format!("{}/main/mlpg.cc", sptk_src),
        format!("{}/main/mlsacheck.cc", sptk_src),
        format!("{}/main/mode.cc", sptk_src),
        format!("{}/main/mpir2c.cc", sptk_src),
        format!("{}/main/mseq.cc", sptk_src),
        format!("{}/main/msvq.cc", sptk_src),
        format!("{}/main/nan.cc", sptk_src),
        format!("{}/main/ndps2c.cc", sptk_src),
        format!("{}/main/norm0.cc", sptk_src),
        format!("{}/main/nrand.cc", sptk_src),
        format!("{}/main/onehot.cc", sptk_src),
        format!("{}/main/par2lar.cc", sptk_src),
        format!("{}/main/par2lpc.cc", sptk_src),
        format!("{}/main/pca.cc", sptk_src),
        format!("{}/main/pcas.cc", sptk_src),
        format!("{}/main/phase.cc", sptk_src),
        format!("{}/main/plp.cc", sptk_src),
        format!("{}/main/pitch.cc", sptk_src),
        format!("{}/main/pitch2sin.cc", sptk_src),
        format!("{}/main/pitch_mark.cc", sptk_src),
        format!("{}/main/pitch_spec.cc", sptk_src),
        format!("{}/main/pnorm.cc", sptk_src),
        format!("{}/main/poledf.cc", sptk_src),
        format!("{}/main/pqmf.cc", sptk_src),
        format!("{}/main/quantize.cc", sptk_src),
        format!("{}/main/ramp.cc", sptk_src),
        format!("{}/main/reverse.cc", sptk_src),
        format!("{}/main/rlevdur.cc", sptk_src),
        format!("{}/main/rmse.cc", sptk_src),
        format!("{}/main/root_pol.cc", sptk_src),
        format!("{}/main/sin.cc", sptk_src),
        format!("{}/main/smcep.cc", sptk_src),
        format!("{}/main/snr.cc", sptk_src),
        format!("{}/main/sopr.cc", sptk_src),
        format!("{}/main/spec.cc", sptk_src),
        format!("{}/main/step.cc", sptk_src),
        format!("{}/main/swab.cc", sptk_src),
        format!("{}/main/symmetrize.cc", sptk_src),
        format!("{}/main/train.cc", sptk_src),
        format!("{}/main/transpose.cc", sptk_src),
        format!("{}/main/ulaw.cc", sptk_src),
        format!("{}/main/vc.cc", sptk_src),
        format!("{}/main/vopr.cc", sptk_src),
        format!("{}/main/vprod.cc", sptk_src),
        format!("{}/main/vstat.cc", sptk_src),
        format!("{}/main/vsum.cc", sptk_src),
        format!("{}/main/window.cc", sptk_src),
        format!("{}/main/world_synth.cc", sptk_src),
        format!("{}/main/x2x.cc", sptk_src),
        format!("{}/main/zcross.cc", sptk_src),
        format!("{}/main/zerodf.cc", sptk_src),

        format!("{}/analysis/adaptive_generalized_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/adaptive_mel_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/adaptive_mel_generalized_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/aperiodicity_extraction.cc", sptk_src),
        format!("{}/analysis/aperiodicity_extraction_by_tandem.cc", sptk_src),
        format!("{}/analysis/aperiodicity_extraction_by_world.cc", sptk_src),
        format!("{}/analysis/autocorrelation_analysis.cc", sptk_src),
        format!("{}/analysis/fast_fourier_transform_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/mel_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/mel_filter_bank_analysis.cc", sptk_src),
        format!("{}/analysis/mel_frequency_cepstral_coefficients_analysis.cc", sptk_src),
        format!("{}/analysis/mel_generalized_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/perceptual_linear_predictive_coefficients_analysis.cc", sptk_src),
        format!("{}/analysis/pitch_extraction.cc", sptk_src),
        format!("{}/analysis/pitch_extraction_by_dio.cc", sptk_src),
        format!("{}/analysis/pitch_extraction_by_harvest.cc", sptk_src),
        format!("{}/analysis/pitch_extraction_by_rapt.cc", sptk_src),
        format!("{}/analysis/pitch_extraction_by_reaper.cc", sptk_src),
        format!("{}/analysis/pitch_extraction_by_swipe.cc", sptk_src),
        format!("{}/analysis/second_order_all_pass_mel_cepstral_analysis.cc", sptk_src),
        format!("{}/analysis/spectrum_extraction.cc", sptk_src),
        format!("{}/analysis/spectrum_extraction_by_world.cc", sptk_src),
        format!("{}/analysis/zero_crossing_analysis.cc", sptk_src),
        format!("{}/check/line_spectral_pairs_stability_check.cc", sptk_src),
        format!("{}/check/linear_predictive_coefficients_stability_check.cc", sptk_src),
        format!("{}/check/mlsa_digital_filter_stability_check.cc", sptk_src),
        format!("{}/compression/a_law_compression.cc", sptk_src),
        format!("{}/compression/a_law_expansion.cc", sptk_src),
        format!("{}/compression/dynamic_range_compression.cc", sptk_src),
        format!("{}/compression/huffman_coding.cc", sptk_src),
        format!("{}/compression/huffman_decoding.cc", sptk_src),
        format!("{}/compression/huffman_encoding.cc", sptk_src),
        format!("{}/compression/inverse_multistage_vector_quantization.cc", sptk_src),
        format!("{}/compression/inverse_uniform_quantization.cc", sptk_src),
        format!("{}/compression/inverse_vector_quantization.cc", sptk_src),
        format!("{}/compression/linde_buzo_gray_algorithm.cc", sptk_src),
        format!("{}/compression/mu_law_compression.cc", sptk_src),
        format!("{}/compression/mu_law_expansion.cc", sptk_src),
        format!("{}/compression/multistage_vector_quantization.cc", sptk_src),
        format!("{}/compression/uniform_quantization.cc", sptk_src),
        format!("{}/compression/vector_quantization.cc", sptk_src),
        format!("{}/conversion/all_pole_to_all_zero_digital_filter_coefficients.cc", sptk_src),
        format!("{}/conversion/autocorrelation_to_composite_sinusoidal_modeling.cc", sptk_src),
        format!("{}/conversion/cepstrum_to_autocorrelation.cc", sptk_src),
        format!("{}/conversion/cepstrum_to_minimum_phase_impulse_response.cc", sptk_src),
        format!("{}/conversion/cepstrum_to_negative_derivative_of_phase_spectrum.cc", sptk_src),
        format!("{}/conversion/composite_sinusoidal_modeling_to_autocorrelation.cc", sptk_src),
        format!("{}/conversion/filter_coefficients_to_group_delay.cc", sptk_src),
        format!("{}/conversion/filter_coefficients_to_phase_spectrum.cc", sptk_src),
        format!("{}/conversion/filter_coefficients_to_spectrum.cc", sptk_src),
        format!("{}/conversion/generalized_cepstrum_gain_normalization.cc", sptk_src),
        format!("{}/conversion/generalized_cepstrum_inverse_gain_normalization.cc", sptk_src),
        format!("{}/conversion/line_spectral_pairs_to_linear_predictive_coefficients.cc", sptk_src),
        format!("{}/conversion/linear_predictive_coefficients_to_cepstrum.cc", sptk_src),
        format!("{}/conversion/linear_predictive_coefficients_to_line_spectral_pairs.cc", sptk_src),
        format!("{}/conversion/linear_predictive_coefficients_to_parcor_coefficients.cc", sptk_src),
        format!("{}/conversion/log_area_ratio_to_parcor_coefficients.cc", sptk_src),
        format!("{}/conversion/mel_cepstrum_inverse_power_normalization.cc", sptk_src),
        format!("{}/conversion/mel_cepstrum_power_normalization.cc", sptk_src),
        format!("{}/conversion/mel_cepstrum_to_mlsa_digital_filter_coefficients.cc", sptk_src),
        format!("{}/conversion/mel_generalized_cepstrum_to_mel_generalized_cepstrum.cc", sptk_src),
        format!("{}/conversion/mel_generalized_cepstrum_to_spectrum.cc", sptk_src),
        format!("{}/conversion/mel_generalized_line_spectral_pairs_to_spectrum.cc", sptk_src),
        format!("{}/conversion/minimum_phase_impulse_response_to_cepstrum.cc", sptk_src),
        format!("{}/conversion/mlsa_digital_filter_coefficients_to_mel_cepstrum.cc", sptk_src),
        format!("{}/conversion/negative_derivative_of_phase_spectrum_to_cepstrum.cc", sptk_src),
        format!("{}/conversion/parcor_coefficients_to_linear_predictive_coefficients.cc", sptk_src),
        format!("{}/conversion/parcor_coefficients_to_log_area_ratio.cc", sptk_src),
        format!("{}/conversion/spectrum_to_autocorrelation.cc", sptk_src),
        format!("{}/conversion/spectrum_to_spectrum.cc", sptk_src),
        format!("{}/conversion/waveform_to_autocorrelation.cc", sptk_src),
        format!("{}/conversion/waveform_to_spectrum.cc", sptk_src),
        format!("{}/filter/all_pole_digital_filter.cc", sptk_src),
        format!("{}/filter/all_pole_lattice_digital_filter.cc", sptk_src),
        format!("{}/filter/all_zero_digital_filter.cc", sptk_src),
        format!("{}/filter/all_zero_lattice_digital_filter.cc", sptk_src),
        format!("{}/filter/infinite_impulse_response_digital_filter.cc", sptk_src),
        format!("{}/filter/inverse_mglsa_digital_filter.cc", sptk_src),
        format!("{}/filter/inverse_pseudo_quadrature_mirror_filter_banks.cc", sptk_src),
        format!("{}/filter/line_spectral_pairs_digital_filter.cc", sptk_src),
        format!("{}/filter/median_filter.cc", sptk_src),
        format!("{}/filter/mglsa_digital_filter.cc", sptk_src),
        format!("{}/filter/mlsa_digital_filter.cc", sptk_src),
        format!("{}/filter/pseudo_quadrature_mirror_filter_banks.cc", sptk_src),
        format!("{}/filter/second_order_digital_filter.cc", sptk_src),
        format!("{}/filter/world_synthesis.cc", sptk_src),
        format!("{}/generation/delta_calculation.cc", sptk_src),
        format!("{}/generation/excitation_generation.cc", sptk_src),
        format!("{}/generation/m_sequence_generation.cc", sptk_src),
        format!("{}/generation/nonrecursive_maximum_likelihood_parameter_generation.cc", sptk_src),
        format!("{}/generation/normal_distributed_random_value_generation.cc", sptk_src),
        format!("{}/generation/periodic_waveform_generation.cc", sptk_src),
        format!("{}/generation/recursive_maximum_likelihood_parameter_generation.cc", sptk_src),
        format!("{}/input/input_source_delay.cc", sptk_src),
        format!("{}/input/input_source_filling_magic_number.cc", sptk_src),
        format!("{}/input/input_source_from_array.cc", sptk_src),
        format!("{}/input/input_source_from_matrix.cc", sptk_src),
        format!("{}/input/input_source_from_stream.cc", sptk_src),
        format!("{}/input/input_source_from_vector.cc", sptk_src),
        format!("{}/input/input_source_interpolation.cc", sptk_src),
        format!("{}/input/input_source_interpolation_with_magic_number.cc", sptk_src),
        format!("{}/input/input_source_preprocessing_for_filter_gain.cc", sptk_src),
        format!("{}/math/discrete_cosine_transform.cc", sptk_src),
        format!("{}/math/discrete_fourier_transform.cc", sptk_src),
        format!("{}/math/distance_calculation.cc", sptk_src),
        format!("{}/math/durand_kerner_method.cc", sptk_src),
        format!("{}/math/dynamic_time_warping.cc", sptk_src),
        format!("{}/math/entropy_calculation.cc", sptk_src),
        format!("{}/math/fast_fourier_transform.cc", sptk_src),
        format!("{}/math/fourier_transform.cc", sptk_src),
        format!("{}/math/frequency_transform.cc", sptk_src),
        format!("{}/math/gaussian_mixture_model_based_conversion.cc", sptk_src),
        format!("{}/math/gaussian_mixture_modeling.cc", sptk_src),
        format!("{}/math/histogram_calculation.cc", sptk_src),
        format!("{}/math/inverse_discrete_cosine_transform.cc", sptk_src),
        format!("{}/math/inverse_discrete_fourier_transform.cc", sptk_src),
        format!("{}/math/inverse_fast_fourier_transform.cc", sptk_src),
        format!("{}/math/inverse_fourier_transform.cc", sptk_src),
        format!("{}/math/levinson_durbin_recursion.cc", sptk_src),
        format!("{}/math/matrix.cc", sptk_src),
        format!("{}/math/matrix2d.cc", sptk_src),
        format!("{}/math/minmax_accumulation.cc", sptk_src),
        format!("{}/math/mode_accumulation.cc", sptk_src),
        format!("{}/math/principal_component_analysis.cc", sptk_src),
        format!("{}/math/product_accumulation.cc", sptk_src),
        format!("{}/math/real_valued_fast_fourier_transform.cc", sptk_src),
        format!("{}/math/real_valued_inverse_fast_fourier_transform.cc", sptk_src),
        format!("{}/math/reverse_levinson_durbin_recursion.cc", sptk_src),
        format!("{}/math/scalar_operation.cc", sptk_src),
        format!("{}/math/second_order_all_pass_frequency_transform.cc", sptk_src),
        format!("{}/math/second_order_all_pass_inverse_frequency_transform.cc", sptk_src),
        format!("{}/math/statistics_accumulation.cc", sptk_src),
        format!("{}/math/symmetric_matrix.cc", sptk_src),
        format!("{}/math/symmetric_system_solver.cc", sptk_src),
        format!("{}/math/toeplitz_plus_hankel_system_solver.cc", sptk_src),
        format!("{}/math/two_dimensional_fast_fourier_transform.cc", sptk_src),
        format!("{}/math/two_dimensional_inverse_fast_fourier_transform.cc", sptk_src),
        format!("{}/math/two_dimensional_real_valued_fast_fourier_transform.cc", sptk_src),
        format!("{}/math/vandermonde_system_solver.cc", sptk_src),
        format!("{}/postfilter/mel_cepstrum_postfilter.cc", sptk_src),
        format!("{}/utils/data_symmetrizing.cc", sptk_src),
        format!("{}/utils/misc_utils.cc", sptk_src),
        format!("{}/utils/sptk_utils.cc", sptk_src),
        format!("{}/window/chebyshev_window.cc", sptk_src),
        format!("{}/window/cosine_window.cc", sptk_src),
        format!("{}/window/data_windowing.cc", sptk_src),
        format!("{}/window/kaiser_window.cc", sptk_src),
        format!("{}/window/standard_window.cc", sptk_src),
    ];
    
    // Compile SPTK
    for file_name in &file_names {
        let file_title = file_name.split("/").last().unwrap().split(".").next().unwrap();

        cc::Build::new()
	        .cpp(true)
            // .warnings(true)
            .flag("-O1")
            .flag("-w")
            .file(&file_name)
            .include(sptk_header)
            .include(third_party_src)
            .include(format!("{}/REAPER", third_party_src))
            .include(format!("{}/WORLD", third_party_src))
            .compile(&format!("{}", file_title));
    }

    // // Find all .h files in the include directory, recursively
    // let mut wrapper_h = String::new();
    // let walker = walkdir::WalkDir::new(sptk_header);
    // for entry in walker {
    //     let entry = entry.unwrap();
    //     let path = entry.path();
    //     if path.is_file() {
    //         let file_name = path.to_str().unwrap();
    //         if file_name.ends_with(".h") {
    //             wrapper_h.push_str(&format!("#include \"{}\"\n", file_name));
    //         }
    //     }
    // }
    // // Write the wrapper header for bindgen
    // std::fs::write("sptk.h", wrapper_h).unwrap();

    // // The bindgen::Builder is the main entry point
    // // to bindgen, and lets you build up options for
    // // the resulting bindings.
    // let bindings = bindgen::Builder::default()
    //     // The input header we would like to generate
    //     // bindings for.
    //     .header("sptk.h")
    //     // Tell cargo to invalidate the built crate whenever any of the
    //     // included header files changed.
    //     .parse_callbacks(Box::new(bindgen::CargoCallbacks::new()))
    //     // Finish the builder and generate the bindings.
    //     .generate()
    //     // Unwrap the Result and panic on failure.
    //     .expect("Unable to generate bindings");

    // // Write the bindings to the $OUT_DIR/bindings.rs file.
    // let out_path = PathBuf::from(std::env::var("OUT_DIR").unwrap());
    // bindings
    //     .write_to_file(out_path.join("src/lib.rs"))
    //     .expect("Couldn't write bindings!");
}